/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinkedList: () => (/* binding */ LinkedList)\n/* harmony export */ });\nconsole.log(\"Now coding\");\r\n\r\nclass LinkedList {\r\n    constructor() {\r\n        this.value = null;\r\n    }\r\n\r\n    head() {\r\n        return this.value;\r\n    }\r\n\r\n    append(value) {\r\n        // If list is empty initialize head node with value.\r\n        if (this.value === null) {\r\n            this.value = new Node(value);\r\n        }\r\n        // Traverse through list and append item to last node.\r\n        else {\r\n            let temp = this.value;\r\n            while (temp.nextNode !== null) temp = temp.nextNode;\r\n            temp.nextNode = new Node(value);\r\n        }\r\n    }\r\n\r\n    prepend(value) {\r\n        // If list is empty initialize head node with value.\r\n        if (this.value === null) {\r\n            this.value = new Node(value);\r\n        } else {\r\n            // Long method.\r\n            // let newNode = new Node(value);\r\n            // newNode.nextNode = this.value;\r\n            // this.value = newNode;\r\n\r\n            // Consise method.\r\n            let newNode = new Node(value, this.value);\r\n            this.value = newNode;\r\n        }\r\n    }\r\n\r\n    size() {\r\n        let temp = this.value;\r\n        let counter = 0;\r\n\r\n        while(temp !== null) {\r\n            temp = temp.nextNode;\r\n            counter++;\r\n        } \r\n\r\n        return counter;\r\n    }\r\n\r\n    tail() {\r\n        let temp = this.value;\r\n        while (temp.nextNode) temp = temp.nextNode;\r\n\r\n        return temp;\r\n    }\r\n\r\n    atIndex(index) {\r\n        let temp = this.value;\r\n        let counter = 0;\r\n\r\n        while (temp.nextNode !== null) {\r\n            temp = temp.nextNode;\r\n            counter++;\r\n            if (counter === index) return temp;\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        // If list is empty, terminate and return undefined.\r\n        if (this.value === null) {\r\n            console.log(\"List is empty, nothing to pop\");\r\n            return;\r\n        }\r\n\r\n        // If there's only one node in the list\r\n        if (this.value.nextNode === null) {\r\n            this.value = null;\r\n            return;\r\n        }\r\n\r\n        // Long method.\r\n        // First pass: Find the total number of nodes (i.e., the index of the last node)\r\n        // let temp = this.value;\r\n        // let counter = 0;\r\n        // while (temp.nextNode) {\r\n        //     temp = temp.nextNode;\r\n        //     counter++;\r\n        // }\r\n\r\n        // // Second pass: Traverse again to the second-last node\r\n        // let secondLastIndex = counter - 2;\r\n        // let currentIndex = 0;\r\n        // temp = this.value // Reset temp to back to head.\r\n\r\n        // while (currentIndex < secondLastIndex) {\r\n        //     temp = temp.nextNode;\r\n        //     delCounter++;\r\n        // }\r\n\r\n        // temp.nextNode = null;\r\n\r\n        // Concise method.\r\n        // Traverse the list to find the second-last node.\r\n        let temp = this.value;\r\n        while (temp.nextNode.nextNode !== null) {\r\n            temp = temp.nextNode;\r\n        }\r\n\r\n        // Set the second-last node's nextNode to null, effectively removing the last node\r\n        temp.nextNode = null;\r\n    }\r\n\r\n    contains(value) {\r\n        let temp = this.value;\r\n\r\n        while(temp != null) {\r\n            if (temp.value === value) return true;\r\n            temp = temp.nextNode;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    find(value) {\r\n        let temp = this.value;\r\n        let counter = 0;\r\n\r\n        while (temp != null) {\r\n            if (temp.value == value) return counter;\r\n            temp = temp.nextNode;\r\n            counter++;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    toString() {\r\n        let temp = this.value;\r\n        let string = '';\r\n\r\n        while (temp != null) {\r\n            string += `( ${temp.value} ) -> `;\r\n            temp = temp.nextNode;\r\n        }\r\n\r\n        return string += `null`;\r\n    }\r\n\r\n    insertAt(value, index) {\r\n        if (index < 0) return;  // Invalid index, return early.\r\n    \r\n        let temp = this.value;\r\n        let counter = 0;\r\n    \r\n        // If inserting at the head (index 0)\r\n        if (index === 0) {\r\n            this.prepend(value);  // Reuse the prepend method to handle insertion at the head\r\n            return;\r\n        }\r\n    \r\n        // Traverse the list to find the correct position\r\n        while (temp != null) {\r\n            if (counter === index - 1) {  // We stop at the node just before the insertion point\r\n                let newNode = new Node(value);  // Create a new node with the given value\r\n                let currentNodeToEnd = temp.nextNode;  // Save reference to the next node\r\n                newNode.nextNode = currentNodeToEnd;  // Point new node to the next node\r\n                temp.nextNode = newNode;  // Point current node to the new node\r\n                return;\r\n            }\r\n            temp = temp.nextNode;  // Move to the next node in the list\r\n            counter++;\r\n        }\r\n    }\r\n\r\n    removeAt(index) {\r\n        if (index < 0 || this.value === null) return;\r\n    \r\n        // If removing the head (index 0)\r\n        if (index === 0) {\r\n            this.value = this.value.nextNode;\r\n            return;  // Exit after removing the head\r\n        }\r\n    \r\n        let temp = this.value;\r\n        let counter = 0;\r\n    \r\n        // Traverse the list to find the node before the one to be removed\r\n        while (temp != null) {\r\n            if (counter === index - 1 && temp.nextNode != null) {\r\n                // Remove the node by updating the pointer\r\n                temp.nextNode = temp.nextNode.nextNode;\r\n                return;\r\n            }\r\n            temp = temp.nextNode;\r\n            counter++;\r\n        }\r\n    }    \r\n    \r\n}\r\n\r\nclass Node {\r\n    constructor(value = null, nextNode = null) {\r\n        this.value = value;\r\n        this.nextNode = nextNode;\r\n    }\r\n}\r\n\r\nlet linkedList = new LinkedList();\r\nlinkedList.append(5);\r\nlinkedList.append(15);\r\nconsole.log(linkedList.head().value) // 5\r\nconsole.log(linkedList.head().nextNode.value);  // 15\r\n\r\nconsole.log(\"Prepending stuff...\")\r\nlinkedList.prepend(10);\r\nconsole.log(linkedList.head().value) // 10\r\nconsole.log(linkedList.head().nextNode.value);  // 5\r\nconsole.log(linkedList.head().nextNode.nextNode.value)\r\nconsole.log(`The size of this list is ${linkedList.size()}`);\r\nconsole.log(`The last node's value is: ${linkedList.tail().value}`);\r\n\r\nconsole.log(`The value of node at index 2 is ${linkedList.atIndex(2).value}`);\r\n// linkedList.pop();\r\nconsole.log(linkedList.tail().value);\r\nconsole.log(linkedList.contains(15));\r\nconsole.log(linkedList.contains(30));\r\nconsole.log(\"Index of 15 is: \", linkedList.find(15));\r\nconsole.log(linkedList.toString()); // ( 10 ) -> ( 5 ) -> ( 15 ) -> null\r\nlinkedList.insertAt(6, 1);\r\nlinkedList.insertAt(80, 3);\r\nconsole.log(linkedList.toString()); // ( 10 ) -> ( 6 ) -> ( 5 ) -> ( 80 ) -> ( 15 ) -> null\r\nlinkedList.removeAt(3);\r\nconsole.log(linkedList.toString());\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\n\r\n\r\n// example uses class syntax - adjust as necessary\r\nconst list = new _index_js__WEBPACK_IMPORTED_MODULE_0__.LinkedList();\r\n\r\nlist.append(\"dog\");\r\nlist.append(\"cat\");\r\nlist.append(\"parrot\");\r\nlist.append(\"hamster\");\r\nlist.append(\"snake\");\r\nlist.append(\"turtle\");\r\n\r\nconsole.log(list.toString());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi5qcyIsIm1hcHBpbmdzIjoiOztBQUF3QztBQUN4QztBQUNBO0FBQ0EsaUJBQWlCLGlEQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RldnN0YXJ0YnVpbGRpbmcvLi9zcmMvbWFpbi5qcz81NmQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpbmtlZExpc3QgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xyXG5cclxuLy8gZXhhbXBsZSB1c2VzIGNsYXNzIHN5bnRheCAtIGFkanVzdCBhcyBuZWNlc3NhcnlcclxuY29uc3QgbGlzdCA9IG5ldyBMaW5rZWRMaXN0KCk7XHJcblxyXG5saXN0LmFwcGVuZChcImRvZ1wiKTtcclxubGlzdC5hcHBlbmQoXCJjYXRcIik7XHJcbmxpc3QuYXBwZW5kKFwicGFycm90XCIpO1xyXG5saXN0LmFwcGVuZChcImhhbXN0ZXJcIik7XHJcbmxpc3QuYXBwZW5kKFwic25ha2VcIik7XHJcbmxpc3QuYXBwZW5kKFwidHVydGxlXCIpO1xyXG5cclxuY29uc29sZS5sb2cobGlzdC50b1N0cmluZygpKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;